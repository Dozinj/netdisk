// Code generated by Begonia. DO NOT EDIT.
// versions:
// 	Begonia v1.0.2
// source: service_user.go 
// begonia client file

 

package call

import (
	"github.com/MashiroC/begonia/app"
	appClient "github.com/MashiroC/begonia/app/client"
	"github.com/MashiroC/begonia/app/coding"
)

var (
	UserServiceService appClient.Service


	_UserServiceServiceRegister appClient.RemoteFunSync
	
	_UserServiceServiceRegisterInSchema  = `
{
			"namespace":"begonia.func.Register",
			"type":"record",
			"name":"In",
			"fields":[
				{"name":"F1","type":{
				"type": "record",
				"name": "User",
				"fields":[{"name":"ID","type":"int"}
,{"name":"Username","type":"string"}
,{"name":"Password","type":"string"}
,{"name":"Salt","type":"string"}
,{"name":"HeaderImg","type":"string"}

				]
			},"alias":"u"}

			]
		}`
	_UserServiceServiceRegisterOutSchema = `
{
			"namespace":"begonia.func.Register",
			"type":"record",
			"name":"Out",
			"fields":[
				{"name":"F1","type":{
				"type": "record",
				"name": "User",
				"fields":[{"name":"ID","type":"int"}
,{"name":"Username","type":"string"}
,{"name":"Password","type":"string"}
,{"name":"Salt","type":"string"}
,{"name":"HeaderImg","type":"string"}

				]
			}}
,{"name":"F2","type":"string"}

			]
		}`
	_UserServiceServiceRegisterInCoder   coding.Coder
	_UserServiceServiceRegisterOutCoder  coding.Coder

	_UserServiceServiceVerifyPassword appClient.RemoteFunSync
	
	_UserServiceServiceVerifyPasswordInSchema  = `
{
			"namespace":"begonia.func.VerifyPassword",
			"type":"record",
			"name":"In",
			"fields":[
				{"name":"F1","type":"string","alias":"username"}
,{"name":"F2","type":"string","alias":"password"}

			]
		}`
	_UserServiceServiceVerifyPasswordOutSchema = `
{
			"namespace":"begonia.func.VerifyPassword",
			"type":"record",
			"name":"Out",
			"fields":[
				{"name":"F1","type":{
				"type": "record",
				"name": "User",
				"fields":[{"name":"ID","type":"int"}
,{"name":"Username","type":"string"}
,{"name":"Password","type":"string"}
,{"name":"Salt","type":"string"}
,{"name":"HeaderImg","type":"string"}

				]
			}}
,{"name":"F2","type":"string"}

			]
		}`
	_UserServiceServiceVerifyPasswordInCoder   coding.Coder
	_UserServiceServiceVerifyPasswordOutCoder  coding.Coder

)


 	
type _UserServiceServiceRegisterIn struct {
	F1 User
}

type _UserServiceServiceRegisterOut struct {
	F1 User
	F2 string
}
 	
type _UserServiceServiceVerifyPasswordIn struct {
	F1 string
	F2 string
}

type _UserServiceServiceVerifyPasswordOut struct {
	F1 User
	F2 string
}


func init() {
	app.ServiceAppMode = app.Ast
	
	bService, err := BegoniaCli.Service("user")
	if err != nil {
		panic(err)
	}
 	
	_UserServiceServiceRegister, err = bService.FuncSync("Register")

	_UserServiceServiceRegisterInCoder, err = coding.NewAvro(_UserServiceServiceRegisterInSchema)
	if err != nil {
		panic(err)
	}
	_UserServiceServiceRegisterOutCoder, err = coding.NewAvro(_UserServiceServiceRegisterOutSchema)
	if err != nil {
		panic(err)
	}
 	
	_UserServiceServiceVerifyPassword, err = bService.FuncSync("VerifyPassword")

	_UserServiceServiceVerifyPasswordInCoder, err = coding.NewAvro(_UserServiceServiceVerifyPasswordInSchema)
	if err != nil {
		panic(err)
	}
	_UserServiceServiceVerifyPasswordOutCoder, err = coding.NewAvro(_UserServiceServiceVerifyPasswordOutSchema)
	if err != nil {
		panic(err)
	}

}

 
func Register(u User) (F1 User, F2 string, err error) {
	var in _UserServiceServiceRegisterIn
	in.F1 = u

	b, err := _UserServiceServiceRegisterInCoder.Encode(in)
	if err != nil {
		panic(err)
	}

	begoniaResTmp, err := _UserServiceServiceRegister(b)
	if err != nil {
		return
	}

	var out _UserServiceServiceRegisterOut
	err = _UserServiceServiceRegisterOutCoder.DecodeIn(begoniaResTmp.([]byte), &out)
	if err != nil {
		panic(err)
	}

	F1 = out.F1

	F2 = out.F2

	return
}
 
func VerifyPassword(username string, password string) (F1 User, F2 string, err error) {
	var in _UserServiceServiceVerifyPasswordIn
	in.F1 = username
	in.F2 = password

	b, err := _UserServiceServiceVerifyPasswordInCoder.Encode(in)
	if err != nil {
		panic(err)
	}

	begoniaResTmp, err := _UserServiceServiceVerifyPassword(b)
	if err != nil {
		return
	}

	var out _UserServiceServiceVerifyPasswordOut
	err = _UserServiceServiceVerifyPasswordOutCoder.DecodeIn(begoniaResTmp.([]byte), &out)
	if err != nil {
		panic(err)
	}

	F1 = out.F1

	F2 = out.F2

	return
}

